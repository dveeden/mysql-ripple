// Copyright 2018 The Ripple Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/wrappers.proto";

package ripple_proto;

service Management {
    rpc GetRippleInfo (Empty) returns (RippleInfo) {}
    rpc GetMasterStatus (Empty) returns (MasterStatus) {}
    rpc GetConnectedSlaves (Empty) returns (Slaves) {}
    rpc GetSlaveBinlogPosition (SlaveAddress) returns (BinlogPosition) {}
    rpc GetBinlogPosition (Empty) returns (BinlogPosition) {}

    rpc StartSlave(StartSlaveRequest) returns (Status) {}
    rpc StopSlave(StopSlaveRequest) returns (Status) {}
    rpc ToggleSemiSyncReply(OnOff) returns (Status) {}
    rpc ChangeMaster(MasterInfo) returns (Status) {}
}

message Empty {
}

message StartSlaveRequest {
    // if idempotent = true, then StartSlave returns OK even if
    // slave is already started.
    bool idempotent = 1;
}

message StopSlaveRequest {
    // if idempotent = true, then StopSlave returns OK even if
    // slave is already stopped.
    bool idempotent = 1;
}

message ServerVersion {
    int32 major_version = 1;
    int32 minor_version = 2;
    int32 patch_level = 3;
    string comment = 4;
}

message FilePosition {
    string filename = 1;
    uint64 offset = 2;
}

message GTID {
    string uuid = 1;
    uint64 server_id = 2;
    uint64 seq_no = 3;
    uint32 domain_id = 4;
}

message GTIDStartPosition {
    repeated GTID gtid = 1;
}

message BinlogPosition {
    // File position of the start of the last event.
    FilePosition latest_event_start_position = 1;
    // File position of the end of the last event.
    FilePosition latest_event_end_position = 2;
    // File position of the end of the last GTID that has been completed.
    FilePosition latest_completed_gtid_position = 3;

    // This message corresponds to the position in the master's binlog
    // of the last event ripple recorded.
    FilePosition latest_master_position = 4;
    // This message corresponds to the position in the master's binlog
    // of the next master event ripple will record.
    FilePosition next_master_position = 5;
    // This message corresponds to the position in the master's binlog
    // of the end of the last GTID that has been completed on ripple.
    FilePosition latest_completed_gtid_master_position = 6;

    // Latest GTID that has been started.
    GTID latest_start_gtid = 7;
    // Latest GTID that has been completed.
    GTID latest_completed_gtid = 8;
    // Position to restart from (if needed.)
    GTIDStartPosition gtid_start_position = 9;

    // GTID purged, i.e set of gtids that is no longer present in binlog.
    // This is the oldest start position that ripple can serve.
    GTIDStartPosition gtid_purged = 10;
}

message MasterInfo {
    google.protobuf.StringValue user = 1;
    google.protobuf.StringValue host = 2;
    google.protobuf.Int32Value  port = 3;
    google.protobuf.StringValue protocol = 4;
    // Do we semi-sync reply.
    // NOTE: If master does not have semi-sync enabled,
    // value of this can be TRUE even if no semi sync is ongoing.
    google.protobuf.BoolValue semi_sync_slave_reply_enabled = 5;
    google.protobuf.BoolValue compressed_protocol = 6;
    google.protobuf.DoubleValue heartbeat_period = 7;
    google.protobuf.StringValue password = 8;
}

message MasterStatus {
    enum State {
        DISCONNECTED = 0;
        CONNECTING = 1;
        CONNECTED = 2;
    }
    State state = 1;
    MasterInfo master_info = 2;
    // The following are not meaningful unless the master is connected:
    int64 server_id = 3;
    string uuid = 4;
    ServerVersion server_version = 5;
    bool semi_sync_master_enabled = 6;
    string server_name = 7;
    bool semi_sync_slave_reply_active = 8;
}

message SlaveAddress {
    string host = 1;
    uint32 port = 2;
    uint32 server_id = 3;
    string server_name = 4;
}

message Slaves {
    repeated SlaveAddress slave = 1;
}

message OnOff {
    bool on = 1;
}

message Status {
    int32 code = 1;
    string info = 2;
}

message RippleInfo {
    string server_name = 1;
}
